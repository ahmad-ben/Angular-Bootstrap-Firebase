V1:'How to connect angular and firebase database | Angular firebase tutorial'
Create An Angular Project.
Create A FireBase Project.
Create The Environment Folder.
DownLoad Process:
  $ ng g environments
    CREATE src/environments/environment.ts (31 bytes)
    CREATE src/environments/environment.development.ts (31 bytes)
    UPDATE angular.json (2962 bytes)
  $ ng add @angular/fire
    ✔ Packages installed successfully.
  ? What features would you like to setup?
    ng deploy -- hosting, Authentication, Firestore
  ? Which Firebase account would you like to use? ahmadbenchakhti@gmail.com
  ? Please select a project: Learn-FireBase
  ? Please select a hosting site: https://learn-firebase-e2173.web.app
  ? Please select an app: learn-FireBase
  ✔ Downloading configuration data of your Firebase WEB app
    CREATE .firebaserc (214 bytes)
    UPDATE .gitignore (602 bytes)
    UPDATE src/app/app.module.ts (798 bytes)
    UPDATE src/environments/environment.ts (350 bytes)
    UPDATE src/environments/environment.development.ts (350 bytes)
    UPDATE angular.json (3306 bytes)
    UPDATE firebase.json (801 bytes)
The Command: 'ng add @angular/fire'. Add The official Angular library for Firebase.
In '' We Should Add:
import { AngularFireModule } from '@angular/fire/compat';
@NgModule({
  imports: [
    AngularFireModule,
  ],
})
-------------------------------------------------------------------------------------
V2:'Angular authentication system using firebase | Login system angular firebase'
app-routing.module.ts:
  A File That Have an NgModule where you can configure your routes.
redirectTo:
  A URL to redirect to when the path matches.
  Absolute if the URL begins with a slash (/), otherwise relative to the path URL.
  Note that no further redirects are evaluated after an absolute redirect.
  When not present, router does not redirect.
pathMatch
  The path-matching strategy, one of 'prefix' or 'full'. Default is 'prefix'.
  By default, the router checks URL elements from the left to see if the URL matches
  a given path and stops when there is a config match. Importantly there must still
  be a config match for each segment of the URL.
  The path-match strategy 'full' matches against the entire URL. It is important to
  do this when redirecting empty-path routes. Otherwise, because an empty path is a
  prefix of any URL, the router would apply the redirect even when navigating to the
  redirect destination, creating an endless loop.
AngularFireAuth
  We can Create An Instance From It, For Dealing With Firebase auth service.
signInWithEmailAndPassword
  Asynchronously signs in using an email and password.
  Fails with an error if the email address and password do not match.
  Note: The user's password is NOT the password used to access the user's email
  account. The email address serves as a unique identifier for the user, and the
  password is used to access the user's account in your Firebase project.
  @param email — The users email address.
  @param password — The users password.
createUserWithEmailAndPassword
  Creates a new user account associated with the specified email address and
  password. On successful creation of the user account, this user will also be signed
  in to your application.
  User account creation can fail if the account already exists or the password is
  invalid.
  Note: The email address acts as a unique identifier for the user and enables an
  email-based password reset. This function will create a new user account and set
  the initial user password.
The Error From The Promises, Is An Object That Have The 'message' Property, That
Message Clarify Why The Process Failed.
signOut
  Signs out the current user.
BootStrap
In This Structure:
  <div class="row mt-5">
    <div class="col">Div1</div>
    <div class="col-4">Div2</div>
    <div class="col">Div3</div>
  </div>
    The Div2 Will Take 4 Columns And Will Be In The Medium, And The Div1 And Div3
    Will Take The Rest From The Row In This Case They Will Also Take 4 Column.
  <div class="card shadow"></div>
    The card Class Will Give The Element Nice Card Look.
    The shadow Class Will Give The Element Nice Shadow Look.
  <div class="card-body"></div>
    The Element Inside The Card, For The Content, The card-body Will Give This
    Element A Padding, Color, And flex: 1 1 auto, The Full Rules Are:
      .card-body {
          flex: 1 1 auto;
          padding: var(--bs-card-spacer-y) var(--bs-card-spacer-x);
          color: var(--bs-card-color);
      }
  <label class="form-label">Content</label>
    The form-label Will Give The Label A Good From.
  <input class="form-control">
    The form-control Will Give The Input A Good From.
  <button class="btn btn-info">Content</button>
    The btn Class Will Give The Element The Shape Of Button.
    The btn-info Class Will Give The Element A Color We Have Other Chooses Like:
      'btn-primary', 'btn-warning'...
  <h4 class="text-dark text-muted">Content</h4>
    The Class text-dark Give The Content Dark Color.
    The Class text-muted Give The Content Mute Color.
  <span class="text-danger">Content</span>
    The Class text-danger Give The Content A Specific Red Color, We Have Other
    Similar Classes Like:
      text-dark
  The cal Class Is For:
    {
      flex: 1 0 0%;
    }
  In This Case Of Class Row:
    <div class="row mt-5">
      <div class="col">Div1</div>
      <div class="col">Div2</div>
      <div class="col">Div3</div>
    </div>
    Take The Number Of Column And Divide Them In The Number Of Divs
  In This Case Of Class Row, When We Have A Direct Child Without The cal Class:
    <div class="row mt-5">
      <div class="col">Div1</div>
      <div>Div2</div>
      <div class="col">Div3</div>
    </div>
    The Flex System Will Destroy.
Angular Logic Stuff:
  <input [(ngModel)]="password">
    The [(ngModel)] Will Take The Value Of The Input Every Time The Input Change, And
    He Will Store him In The password Component Property.
-------------------------------------------------------------------------------------
V3:'Forgot password and email verification in angular | Firebase database':
sendPasswordResetEmail
  Sends a password reset email to the given email address.
  To complete the password reset, call firebase.auth.Auth.confirmPasswordReset with
  the code supplied in the email sent to the user, along with the new password
  specified by the user.
  @param email — The email address with the password to be reset.
  @param actionCodeSettings
  The action code settings. If specified, the state/continue URL will be set as the

  "continueUrl" parameter in the password reset link. The default password reset
  landing page will use this to display a link to go back to the app if it is
  installed. If the actionCodeSettings is not specified, no URL is appended to the
  action URL. The state URL provided must belong to a domain that is whitelisted by
  the developer in the console. Otherwise an error will be thrown. Mobile app
  redirects will only be applicable if the developer configures and accepts the
  Firebase Dynamic Links terms of condition. The Android package name and iOS bundle
  ID will be respected only if they are configured in the same Firebase Auth project
  used.
The Value Of The Argument From The Resolve Call Function That Come From The Promise,
That Return From signInWithEmailAndPassword. Is An Object Have For Members 'All Are
Properties': operationType, credential, additionalUserInfo, user. We Need The Last
Property For
Create A Verification Method. This 'user' Member Of Type firebase.default.User.
This Type Have An Important Members Like 'sendEmailVerification' That Will Take The
Email From The 'user.email' And Will Send To This Email A Message For Verification.
This Type Also Have The emailVerified Property And He Is A Boolean Value, false Means
The Email Do Not Verified Yet.
By This Properties And Method We Provide A Service For Make Sure The The Email In
Real And Also Prevent The UnVerified Emails.
-------------------------------------------------------------------------------------
V4:'Login with google | Angular tutorial | Firebase':
For Sign Up With Google Or Any Other Available Method We May Have A Specific module
The Give Us This Ability Like: GoogleAuthProvider, FacebookAuthProvider,
GithubAuthProvider From 'firebase/auth'. For Example:
  signUpWithGoogle() {
    this.InsAngularFireAuth.signInWithPopup(new GoogleAuthProvider).then(
      (res) => {this.router.navigateByUrl('Path')},
      (err) => {err.message}
    )
  }
signInWithPopup
  Authenticates a Firebase client using a popup-based OAuth authentication flow.
  If succeeds, returns the signed in user along with the provider's credential. If
  sign in was unsuccessful, returns an error object containing additional information
  about the error.
  @param provider
    The provider to authenticate. The provider has to be an OAuth provider. Non-OAuth
    providers like * firebase.auth.EmailAuthProvider will throw an error.
OAuth
  (Open Authorization) is an open standard authorization framework for token-based
  authorization on the internet.
-------------------------------------------------------------------------------------
V5:'Angular firebase crud | Student management system in angular':
For Make The Label Of The Input Moving When We Focus On The Input, We Should Put The
Input And The Label And Respect The Attribute And The Ordering Also.
  <input class="form-control" placeholder="name@example.com">
  <label>Email address</label>
  The CSS Clarification:
    .form-floating>.form-control-plaintext~label,
    .form-floating>.form-control:focus~label,
    .form-floating>.form-control:not(:placeholder-shown)~label,
    .form-floating>.form-select~label {
      opacity: .65;
      transform: scale(.85) translateY(-0.5rem) translateX(0.15rem);
    }
For Create An Interface:
  ng g interface PathAndNameOfInterface
If You Will Dealing A Specific Data In A Lot Of Process, You Should Define A Specific
Type For This Data.
For Dealing With FireBase Data, We Use The 'AngularFirestore' Module For Extract From
It An Instance.
AngularFirestore
  allows you to work with Cloud Firestore, the new flagship database for mobile app
  development.
Every New Item We Will Put It In The FireBase Store Need An Id, For Give The FireBase
The Ability For Create This Id We Use The 'createId' Method:
createId
  Returns a generated Firestore Document Id.
  Example:
    ObjectName.id = InstanceAngFireStore.createId();
Then We Can Use This Command For Create A Collection And Add To This Collection A
Data:
  InstanceAngFireStore.collection('/NameOfCollection').add(Data);
  collection
    Create a reference to a Firestore Collection based on a path or
    CollectionReference and an optional query function to narrow the result set.
  add
    Add data to a collection reference.
    Note: Data operation methods are done on the reference not the query. This means
    when you update data it is not updating data to the window of your query unless
    the data fits the criteria of the query. The Method Will return An Promise.
If We Want To Get Data From The FireBase Store We Use This Line:
  InstanceAngFireStore.collection('NameOfCollection').snapshotChanges();
snapshotChanges
  Create a stream of synchronized changes. This method keeps the local array in
  sorted query order.
  This Method Will Return An Observable, For Get The Data From The Observable Values
  We Should Add These Members:
    ObservableValue.payload.doc.data()
  And For Get The Generated Id Of FireBase For The Document For Complete Our Path.
    ObservableValue.payload.doc.id
For Delete A Specific Item From A Document:
  this.InsAngFireStore.doc(`/NameOfCollection/${DocumentId}`).delete();
doc
  Create a reference to a Firestore Document based on a path or DocumentReference.
  Note that documents are not queryable because they are simply objects. However,
  documents have sub-collections that return a Collection reference and can be
  queried.
delete
  Delete a document. Return A Promise.
The Full Idea Of Saving Data In FireBase Is About A Big Object And His Properties:
  {
    Students: {
      IdOfCollection: {
      Email: "ahmed@ben"
      FirstName: "AHMED"
      LastName: "BEN CHAKHTER"
      Mobile: "0609526086"
      id: "IdForObject"
      }
    }
  }
-------------------------------------------------------------------------------------
V6:'A File Management System using Angular and Firebase':
We Have A Type Of Data Call 'File':
  interface File
    Provides information about files and allows JavaScript in a web page to access
    their content.
    Interface Clarification:
  interface File extends Blob {
    readonly lastModified: number;
    readonly name: string;
    readonly webkitRelativePath: string;
  }
About The Blob Interface:
  interface Blob {
    readonly size: number;
    readonly type: string;
    arrayBuffer(): Promise<ArrayBuffer>;
    slice(start?: number, end?: number, contentType?: string): Blob;
    stream(): ReadableStream<Uint8Array>;
    text(): Promise<string>;
  }
  A file-like object of immutable, raw data. Blobs represent data that isn't
  necessarily in a JavaScript-native format. The File interface is based on Blob,
  inheriting blob functionality and expanding it to support files on the user's
  system.
  The Blob object represents a blob; they can be read as text or binary data, or
  converted into a ReadableStream so its methods can be used for processing the data.
  Blobs can represent data that isn't necessarily in a JavaScript-native format.
  BLOB stands for a “Binary Large Object,” a data type that stores binary data.
  Binary Large Objects (BLOBs) can be complex files like images or videos, unlike
  other data strings that only store letters and numbers. A BLOB will hold multimedia
  objects to add to a database; however, not all databases support BLOB storage.
AngularFireStorage
  Cloud Storage is designed to help you quickly and easily store and serve
  user-generated content, such as photos and videos.
Other Method For Delete A Specific Element In FireStore Database:
    this.storeFire.collection('/NameOfCollection').doc(DocumentId).delete();
For Delete An Item 'File' From Firebase Storage We Need TonUse This Command:
  this.storageInstanceObj.ref(`/NameOfFolder/NameOfFile`).delete();
FileList
  An object of this type is returned by the files property of the HTML <input>
  element; this lets you access the list of files selected with the
  <input type="file"> element. It's also used for a list of files dropped into web
  content when using the drag and drop API; see the DataTransfer object for details
  on this usage.
Input With 'Type Attribute Equal File':
  <input type="file" class="text-nowrap test-truncate" (change)="selectFile($event)">
    .text-nowrap {
      white-space: nowrap!important;
    }
    .text-truncate {
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }
For Create A Progress bar:
  <div class="progress">
    <div class="progress-bar" style="width: Percentage%;">
      Percentage%
    </div>
  </div>
Process Clarification:
  <input type="file" (change)="selectFile($event)">
    In The Case Of The Input Type Is File, When We Choose A File To This Input That
    Will Activate It The change Event. Ny The $event Variable And Some Properties,
    '$event.target.files' We Will Get An Object Of Type FileList, And After This We
    Need To Extract From It The File Object By Index 0. '$event.target.files[0]'.
  After This We Can Create A New Object That Have The File Inside One Of His
  Properties.
  And Finally We Can Our File In The Storage FireBase By This Command:
    this.InsFireStorage.ref(/NameForFolder/NameOfFile).put($event.target.files[0])
  The put Method Will Return AngularFireUploadTask Type That If We Add To Him A
  'snapshotChanges()' We Will Have An Observable That Can Track His Process And After
  He Finish Add An Object To Our View That Represent The Added File And Prove That
  Our Object Added Successfully.
  From This Observable That Will Return A UploadTaskSnapshotCompat Instance We Can
  Have The InstanceNextPara.bytesTransferred And Also The totalBytes. Then Calculate
  The Percentage Of Progress.
  After The Observable Finish His Work, By The finalize Operator. We Can Use Inside
  It The this.fireStorage.ref(/NameForFolder/NameOfFile).getDownloadURL() This Method
  Will Give Us The Url For This Specific File In FireBase Storage. For A Direct
  Access.
  For Delete A File Storage:
    this.storageFile.ref(/NameForFolder/NameOfFile).delete();
interface FileList
  An object of this type is returned by the files property of the HTML element; this
  lets you access the list of files selected with the element. It's also used for a
  list of files dropped into web content when using the drag and drop API; see the
  DataTransfer object for details on this usage.
If We Want To ave A Confirm Before A Danger Process, We Can Use:
  if(window.confirm(Warning Text)){
    Danger Action Code;
  }
Good Mapping Of Work:
  Define The Type Of The Data That We Will Work With.
  Add A Service Class For All The Services Method And Properties That This Data Will
  Need 'Push, Get, Delete, Update...'.
  Dealing With The HTML Markup 'Template'.
  Link Between All By The Ts File For The Template.
The Ordering Of The Operators Sometime Make A Different And Sometime Doesn't.
The Main Operator Is:
  this.InsFireStorage.ref(/NameOfFolder/NameOfFile).put(FileData).snapshotChanges()
    .pipe(finalize(() => {
      storageRef.getDownloadURL().subscribe({
        next: (nextPara) => {
          this.currentFileUpload.url = nextPara,
          this.currentFileUpload.size = this.currentFileUpload.file.size,
          this.currentFileUpload.name = this.currentFileUpload.file.name,
          this.fileService.saveMetaDtaOfFile(this.currentFileUpload),
          this.ngOnInit()
        }
      })
    })
  ).subscribe({
    next: (nextPara) => {
      this.percentage =  Math.trunc(
        (nextPara!.bytesTransferred * 100 / nextPara!.totalBytes)
      );
    },
    error: (errorPara) => {
      Alert('Error Occurred');
    },
  })
<a href="URL" type="button" download>Download</a>
  This attribute instructs browsers to download a URL instead of navigating to it, so
  the user will be prompted to save it as a local file. If the attribute has a value,
  it is used as the pre-filled file name in the Save prompt (the user can still
  change the file name if they want). There are no restrictions on allowed values,
  though / and \ are converted to underscores. Most file systems limit some
  punctuation in file names, and browsers will adjust the suggested name accordingly.
  Notes
  This attribute only works for same-origin URLs.
  Although HTTP(s) URLs need to be in the same-origin, blob: URLs and data: URLs are
  allowed so that content generated by JavaScript, such as pictures created in an
  image-editor Web app, can be downloaded.
  If the HTTP header Content-Disposition: gives a different filename than this
  attribute, the HTTP header takes priority over this attribute.
  If Content-Disposition: is set to inline, Firefox prioritizes Content-Disposition,
  like the filename case, while Chrome prioritizes the download attribute.
-------------------------------------------------------------------------------------
Deploy My Project In FireBase:
$ npm install -g firebase-tools
$ firebase login
Already logged in as ahmadbenchakhti@gmail.com
$ firebase init
$ ng build --configuration production
$ firebase deploy
Project Console: https://console.firebase.google.com/project/learn-firebase-e2173/overview
Hosting URL: https://learn-firebase-e2173.web.app
text-nowrap {
  white-space: nowrap!important;
}
.overflow-x-auto {
  overflow-x: auto!important;
}


